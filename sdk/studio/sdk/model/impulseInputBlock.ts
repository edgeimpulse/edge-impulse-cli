/**
 * Edge Impulse API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export class ImpulseInputBlock {
    /**
    * Identifier for this block. Make sure to up this number when creating a new block, and don\'t re-use identifiers. If the block hasn\'t changed, keep the ID as-is.
    */
    'id': number;
    /**
    * Block type (either time-series or image)
    */
    'type': ImpulseInputBlockTypeEnum;
    /**
    * Block name, will be used in menus
    */
    'name': string;
    /**
    * Block title, used in the impulse UI
    */
    'title': string;
    /**
    * Size of the sliding window in milliseconds
    */
    'windowSizeMs'?: number;
    /**
    * We use a sliding window to go over the raw data. How many milliseconds to increase the sliding window with for each step.
    */
    'windowIncreaseMs'?: number;
    /**
    * (Input only) Frequency of the input data in Hz
    */
    'frequencyHz'?: number;
    /**
    * We use a sliding window to go over the raw data. How many milliseconds to increase the sliding window with for each step in classification mode.
    */
    'classificationWindowIncreaseMs'?: number;
    /**
    * Whether to zero pad data when a data item is too short
    */
    'padZeros'?: boolean;
    /**
    * Width all images are resized to before training
    */
    'imageWidth'?: number;
    /**
    * Width all images are resized to before training
    */
    'imageHeight'?: number;
    /**
    * How to resize images before training
    */
    'resizeMode'?: ImpulseInputBlockResizeModeEnum;
    /**
    * Resize method to use when resizing images
    */
    'resizeMethod'?: ImpulseInputBlockResizeMethodEnum;
    /**
    * If images are resized using a crop, choose where to anchor the crop
    */
    'cropAnchor'?: ImpulseInputBlockCropAnchorEnum;
    /**
    * Whether this block is the primary version of its base block.
    */
    'primaryVersion': boolean;
    /**
    * The version number of the original block this version was based on. If this is an original block, will be undefined.
    */
    'baseBlockId'?: number;
    /**
    * The version number of the original tuner block this version was based on. If this is an original tuner block, will be undefined
    */
    'tunerBaseBlockId'?: number;
    /**
    * The version number of the original tuner template block this version was based on. If this is an original tuner template block, will be undefined
    */
    'tunerTemplateId'?: number;
    /**
    * Specifies if this block was copied from a tuner block when a tuner model variant was set as primary model
    */
    'tunerPrimary'?: boolean;
    /**
    * ID of block this block version was cloned from
    */
    'clonedFromBlockId'?: number;
    /**
    * Specifies if this block was updated after being cloned/created
    */
    'mutated'?: boolean;
    /**
    * Whether is block is enabled. A block is assumed to be enabled when unset.
    */
    'enabled'?: boolean;
    /**
    * Whether block is stored in database.
    */
    'db'?: boolean;
    /**
    * A short description of the block version, displayed in the block versioning UI
    */
    'description'?: string;
    /**
    * The system component that created the block version (createImpulse | clone | tuner). Cannot be set via API.
    */
    'createdBy'?: string;
    /**
    * The datetime that the block version was created. Cannot be set via API.
    */
    'createdAt'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "ImpulseInputBlockTypeEnum"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "windowSizeMs",
            "baseName": "windowSizeMs",
            "type": "number"
        },
        {
            "name": "windowIncreaseMs",
            "baseName": "windowIncreaseMs",
            "type": "number"
        },
        {
            "name": "frequencyHz",
            "baseName": "frequencyHz",
            "type": "number"
        },
        {
            "name": "classificationWindowIncreaseMs",
            "baseName": "classificationWindowIncreaseMs",
            "type": "number"
        },
        {
            "name": "padZeros",
            "baseName": "padZeros",
            "type": "boolean"
        },
        {
            "name": "imageWidth",
            "baseName": "imageWidth",
            "type": "number"
        },
        {
            "name": "imageHeight",
            "baseName": "imageHeight",
            "type": "number"
        },
        {
            "name": "resizeMode",
            "baseName": "resizeMode",
            "type": "ImpulseInputBlockResizeModeEnum"
        },
        {
            "name": "resizeMethod",
            "baseName": "resizeMethod",
            "type": "ImpulseInputBlockResizeMethodEnum"
        },
        {
            "name": "cropAnchor",
            "baseName": "cropAnchor",
            "type": "ImpulseInputBlockCropAnchorEnum"
        },
        {
            "name": "primaryVersion",
            "baseName": "primaryVersion",
            "type": "boolean"
        },
        {
            "name": "baseBlockId",
            "baseName": "baseBlockId",
            "type": "number"
        },
        {
            "name": "tunerBaseBlockId",
            "baseName": "tunerBaseBlockId",
            "type": "number"
        },
        {
            "name": "tunerTemplateId",
            "baseName": "tunerTemplateId",
            "type": "number"
        },
        {
            "name": "tunerPrimary",
            "baseName": "tunerPrimary",
            "type": "boolean"
        },
        {
            "name": "clonedFromBlockId",
            "baseName": "clonedFromBlockId",
            "type": "number"
        },
        {
            "name": "mutated",
            "baseName": "mutated",
            "type": "boolean"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean"
        },
        {
            "name": "db",
            "baseName": "db",
            "type": "boolean"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "createdBy",
            "baseName": "createdBy",
            "type": "string"
        },
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return ImpulseInputBlock.attributeTypeMap;
    }
}


export type ImpulseInputBlockTypeEnum = 'time-series' | 'image' | 'video';
export const ImpulseInputBlockTypeEnumValues: string[] = ['time-series', 'image', 'video'];

export type ImpulseInputBlockResizeModeEnum = 'squash' | 'fit-short' | 'fit-long' | 'crop';
export const ImpulseInputBlockResizeModeEnumValues: string[] = ['squash', 'fit-short', 'fit-long', 'crop'];

export type ImpulseInputBlockResizeMethodEnum = 'lanczos3' | 'nearest';
export const ImpulseInputBlockResizeMethodEnumValues: string[] = ['lanczos3', 'nearest'];

export type ImpulseInputBlockCropAnchorEnum = 'top-left' | 'top-center' | 'top-right' | 'middle-left' | 'middle-center' | 'middle-right' | 'bottom-left' | 'bottom-center' | 'bottom-right';
export const ImpulseInputBlockCropAnchorEnumValues: string[] = ['top-left', 'top-center', 'top-right', 'middle-left', 'middle-center', 'middle-right', 'bottom-left', 'bottom-center', 'bottom-right'];

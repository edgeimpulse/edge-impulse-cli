/**
 * Edge Impulse API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { OptimizeConfig } from './optimizeConfig';
import { OptimizeStateResponseAllOfStatus } from './optimizeStateResponseAllOfStatus';
import { OptimizeStateResponseAllOfWorkers } from './optimizeStateResponseAllOfWorkers';
import { TunerTrial } from './tunerTrial';

export class OptimizeStateResponseAllOf {
    'config': OptimizeConfig;
    'status': OptimizeStateResponseAllOfStatus;
    /**
    * Actual tuner process, job message events will be tagged with this ID
    */
    'tunerJobId'?: number;
    /**
    * The coordinator pod, attach the job runner to this process for finished events
    */
    'tunerCoordinatorJobId'?: number;
    /**
    * Job ID for the initial job this job continuous the hyperparameter search process for.
    */
    'continuationJobId'?: number;
    /**
    * Tuning algorithm to use to search hyperparameter space
    */
    'tuningAlgorithm'?: OptimizeStateResponseAllOfTuningAlgorithmEnum;
    /**
    * Whether the job is active (if false => finished)
    */
    'tunerJobIsRunning': boolean;
    'trials': Array<TunerTrial>;
    'projectDataType': OptimizeStateResponseAllOfProjectDataTypeEnum;
    'jobError'?: string;
    'workers': Array<OptimizeStateResponseAllOfWorkers>;
    /**
    * Index of the next run to be created. Used to pre-populate the name of the next run.
    */
    'nextRunIndex': number;
    /**
    * Whether the search can be extended to evaluate more candidate models. Extending is possible if the search space contains candidate models that are expected to perform better than the current best candidate. And extending is also possible if the previous run was paused due to the total runtime limit being exceeded.
    */
    'canExtendSearch': boolean;
    'isWhitelabel': boolean;
    /**
    * Whether the total training time has exceeded the defined limit for the current run.
    */
    'totalTrainingTimeExceeded': boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "config",
            "baseName": "config",
            "type": "OptimizeConfig"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "OptimizeStateResponseAllOfStatus"
        },
        {
            "name": "tunerJobId",
            "baseName": "tunerJobId",
            "type": "number"
        },
        {
            "name": "tunerCoordinatorJobId",
            "baseName": "tunerCoordinatorJobId",
            "type": "number"
        },
        {
            "name": "continuationJobId",
            "baseName": "continuationJobId",
            "type": "number"
        },
        {
            "name": "tuningAlgorithm",
            "baseName": "tuningAlgorithm",
            "type": "OptimizeStateResponseAllOfTuningAlgorithmEnum"
        },
        {
            "name": "tunerJobIsRunning",
            "baseName": "tunerJobIsRunning",
            "type": "boolean"
        },
        {
            "name": "trials",
            "baseName": "trials",
            "type": "Array<TunerTrial>"
        },
        {
            "name": "projectDataType",
            "baseName": "projectDataType",
            "type": "OptimizeStateResponseAllOfProjectDataTypeEnum"
        },
        {
            "name": "jobError",
            "baseName": "jobError",
            "type": "string"
        },
        {
            "name": "workers",
            "baseName": "workers",
            "type": "Array<OptimizeStateResponseAllOfWorkers>"
        },
        {
            "name": "nextRunIndex",
            "baseName": "nextRunIndex",
            "type": "number"
        },
        {
            "name": "canExtendSearch",
            "baseName": "canExtendSearch",
            "type": "boolean"
        },
        {
            "name": "isWhitelabel",
            "baseName": "isWhitelabel",
            "type": "boolean"
        },
        {
            "name": "totalTrainingTimeExceeded",
            "baseName": "totalTrainingTimeExceeded",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return OptimizeStateResponseAllOf.attributeTypeMap;
    }
}


export type OptimizeStateResponseAllOfTuningAlgorithmEnum = 'random' | 'hyperband' | 'bayesian' | 'custom';
export const OptimizeStateResponseAllOfTuningAlgorithmEnumValues: string[] = ['random', 'hyperband', 'bayesian', 'custom'];

export type OptimizeStateResponseAllOfProjectDataTypeEnum = 'audio' | 'image' | 'motion' | 'other';
export const OptimizeStateResponseAllOfProjectDataTypeEnumValues: string[] = ['audio', 'image', 'motion', 'other'];

/**
 * Edge Impulse API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { KerasModelVariantEnum } from './kerasModelVariantEnum';
import { ModelEngineShortEnum } from './modelEngineShortEnum';
import { ProjectVisibility } from './projectVisibility';

/**
* Only fields set in this object will be updated.
*/
export class UpdateProjectRequest {
    /**
    * New logo URL, or set to `null` to remove the logo.
    */
    'logo'?: string;
    /**
    * New project name.
    */
    'name'?: string;
    'description'?: string;
    'projectVisibility'?: ProjectVisibility;
    /**
    * If the project allows public access, whether to list it the public projects overview response. If not listed, the project is still accessible via direct link. If the project does not allow public access, this field has no effect. 
    */
    'publicProjectListed'?: boolean;
    /**
    * Call this when clicking the Eon compiler setting
    */
    'lastDeployEonCompiler'?: boolean;
    'lastDeployModelEngine'?: ModelEngineShortEnum;
    /**
    * MCU used for calculating latency
    */
    'latencyDevice'?: string;
    'experiments'?: Array<string>;
    /**
    * Whether to show the \'Create your first impulse\' section on the dashboard
    */
    'showCreateFirstImpulse'?: boolean;
    /**
    * What labeling flow to use
    */
    'labelingMethod'?: UpdateProjectRequestLabelingMethodEnum;
    /**
    * Which option was selected in the project type wizard
    */
    'selectedProjectTypeInWizard'?: UpdateProjectRequestSelectedProjectTypeInWizardEnum;
    /**
    * The next step in the getting started wizard, or set to -1 to clear the getting started wizard
    */
    'gettingStartedStep'?: number;
    /**
    * Whether to use GPU for training
    */
    'useGpu'?: boolean;
    /**
    * Job limit in minutes
    */
    'computeTimeLimitM'?: number;
    /**
    * DSP file size in MB
    */
    'dspFileSizeMb'?: number;
    'enterprisePerformance'?: boolean;
    /**
    * Amount of RAM allocated to training jobs
    */
    'trainJobRamMb'?: number;
    /**
    * New metadata about the project
    */
    'metadata'?: object;
    /**
    * Readme for the project (in Markdown)
    */
    'readme'?: string;
    'lastAcquisitionLabel'?: string;
    /**
    * The IDs of users who should be notified when a Keras or retrain job is finished.
    */
    'trainJobNotificationUids'?: Array<number>;
    /**
    * The IDs of users who should be notified when a DSP job is finished.
    */
    'dspJobNotificationUids'?: Array<number>;
    /**
    * The IDs of users who should be notified when a model testing job is finished.
    */
    'modelTestingJobNotificationUids'?: Array<number>;
    /**
    * The IDs of users who should be notified when an auto segmentation job is finished.
    */
    'autoSegmenterJobNotificationUids'?: Array<number>;
    /**
    * The IDs of users who should be notified when an export job is finished.
    */
    'exportJobNotificationUids'?: Array<number>;
    /**
    * Config file specifying how to process CSV files. (set to null to clear the config)
    */
    'csvImportConfig'?: object;
    'inPretrainedModelFlow'?: boolean;
    /**
    * Set to \'0\' to disable DSP paging
    */
    'dspPageSize'?: number;
    /**
    * Used in tests, to ensure samples that need to be processed async are not picked up until the flag is set to FALSE again.
    */
    'indPauseProcessingSamples'?: boolean;
    /**
    * Whether to show the actual sensor data in acquisition charts (only applies when you have structured labels)
    */
    'showSensorDataInAcquisitionGraph'?: boolean;
    /**
    * Which deployment target was last selected (used to populate this deployment target again the next time you visit the deployment page). Should match the _format_ property of the response from listDeploymentTargetsForProject.
    */
    'lastDeploymentTarget'?: string;
    /**
    * Default page size on data acquisition
    */
    'dataAcquisitionPageSize'?: number;
    /**
    * Default view type on data acquisition
    */
    'dataAcquisitionViewType'?: UpdateProjectRequestDataAcquisitionViewTypeEnum;
    /**
    * Number of grid columns in non-detailed view on data acquisition
    */
    'dataAcquisitionGridColumnCount'?: number;
    /**
    * Number of grid columns in detailed view on data acquisition
    */
    'dataAcquisitionGridColumnCountDetailed'?: number;
    /**
    * If enabled, does not round sample length to hours/minutes/seconds, but always displays sample length in milliseconds. E.g. instead of 1m 32s, this\'ll say 92,142ms.
    */
    'showExactSampleLength'?: boolean;
    'defaultProfilingVariant'?: KerasModelVariantEnum;
    /**
    * Set of model variants enabled by default on the model testing and live classification pages.
    */
    'enabledModelProfilingVariants'?: Array<KerasModelVariantEnum>;
    /**
    * Which core metrics should be hidden in the impulse list. See \'GetAllDetailedImpulsesResponse\' for a list of all metrics.
    */
    'impulseListCoreMetricsHiddenColumns'?: Array<string>;
    /**
    * Which additional metrics should be shown in the impulse list. See \'GetAllDetailedImpulsesResponse\' for a list of all metrics.
    */
    'impulseListAdditionalMetricsShownColumns'?: Array<string>;
    /**
    * Which extra columns should be shown in the impulse list.
    */
    'impulseListExtraColumns'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "logo",
            "baseName": "logo",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "projectVisibility",
            "baseName": "projectVisibility",
            "type": "ProjectVisibility"
        },
        {
            "name": "publicProjectListed",
            "baseName": "publicProjectListed",
            "type": "boolean"
        },
        {
            "name": "lastDeployEonCompiler",
            "baseName": "lastDeployEonCompiler",
            "type": "boolean"
        },
        {
            "name": "lastDeployModelEngine",
            "baseName": "lastDeployModelEngine",
            "type": "ModelEngineShortEnum"
        },
        {
            "name": "latencyDevice",
            "baseName": "latencyDevice",
            "type": "string"
        },
        {
            "name": "experiments",
            "baseName": "experiments",
            "type": "Array<string>"
        },
        {
            "name": "showCreateFirstImpulse",
            "baseName": "showCreateFirstImpulse",
            "type": "boolean"
        },
        {
            "name": "labelingMethod",
            "baseName": "labelingMethod",
            "type": "UpdateProjectRequestLabelingMethodEnum"
        },
        {
            "name": "selectedProjectTypeInWizard",
            "baseName": "selectedProjectTypeInWizard",
            "type": "UpdateProjectRequestSelectedProjectTypeInWizardEnum"
        },
        {
            "name": "gettingStartedStep",
            "baseName": "gettingStartedStep",
            "type": "number"
        },
        {
            "name": "useGpu",
            "baseName": "useGpu",
            "type": "boolean"
        },
        {
            "name": "computeTimeLimitM",
            "baseName": "computeTimeLimitM",
            "type": "number"
        },
        {
            "name": "dspFileSizeMb",
            "baseName": "dspFileSizeMb",
            "type": "number"
        },
        {
            "name": "enterprisePerformance",
            "baseName": "enterprisePerformance",
            "type": "boolean"
        },
        {
            "name": "trainJobRamMb",
            "baseName": "trainJobRamMb",
            "type": "number"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "object"
        },
        {
            "name": "readme",
            "baseName": "readme",
            "type": "string"
        },
        {
            "name": "lastAcquisitionLabel",
            "baseName": "lastAcquisitionLabel",
            "type": "string"
        },
        {
            "name": "trainJobNotificationUids",
            "baseName": "trainJobNotificationUids",
            "type": "Array<number>"
        },
        {
            "name": "dspJobNotificationUids",
            "baseName": "dspJobNotificationUids",
            "type": "Array<number>"
        },
        {
            "name": "modelTestingJobNotificationUids",
            "baseName": "modelTestingJobNotificationUids",
            "type": "Array<number>"
        },
        {
            "name": "autoSegmenterJobNotificationUids",
            "baseName": "autoSegmenterJobNotificationUids",
            "type": "Array<number>"
        },
        {
            "name": "exportJobNotificationUids",
            "baseName": "exportJobNotificationUids",
            "type": "Array<number>"
        },
        {
            "name": "csvImportConfig",
            "baseName": "csvImportConfig",
            "type": "object"
        },
        {
            "name": "inPretrainedModelFlow",
            "baseName": "inPretrainedModelFlow",
            "type": "boolean"
        },
        {
            "name": "dspPageSize",
            "baseName": "dspPageSize",
            "type": "number"
        },
        {
            "name": "indPauseProcessingSamples",
            "baseName": "indPauseProcessingSamples",
            "type": "boolean"
        },
        {
            "name": "showSensorDataInAcquisitionGraph",
            "baseName": "showSensorDataInAcquisitionGraph",
            "type": "boolean"
        },
        {
            "name": "lastDeploymentTarget",
            "baseName": "lastDeploymentTarget",
            "type": "string"
        },
        {
            "name": "dataAcquisitionPageSize",
            "baseName": "dataAcquisitionPageSize",
            "type": "number"
        },
        {
            "name": "dataAcquisitionViewType",
            "baseName": "dataAcquisitionViewType",
            "type": "UpdateProjectRequestDataAcquisitionViewTypeEnum"
        },
        {
            "name": "dataAcquisitionGridColumnCount",
            "baseName": "dataAcquisitionGridColumnCount",
            "type": "number"
        },
        {
            "name": "dataAcquisitionGridColumnCountDetailed",
            "baseName": "dataAcquisitionGridColumnCountDetailed",
            "type": "number"
        },
        {
            "name": "showExactSampleLength",
            "baseName": "showExactSampleLength",
            "type": "boolean"
        },
        {
            "name": "defaultProfilingVariant",
            "baseName": "defaultProfilingVariant",
            "type": "KerasModelVariantEnum"
        },
        {
            "name": "enabledModelProfilingVariants",
            "baseName": "enabledModelProfilingVariants",
            "type": "Array<KerasModelVariantEnum>"
        },
        {
            "name": "impulseListCoreMetricsHiddenColumns",
            "baseName": "impulseListCoreMetricsHiddenColumns",
            "type": "Array<string>"
        },
        {
            "name": "impulseListAdditionalMetricsShownColumns",
            "baseName": "impulseListAdditionalMetricsShownColumns",
            "type": "Array<string>"
        },
        {
            "name": "impulseListExtraColumns",
            "baseName": "impulseListExtraColumns",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return UpdateProjectRequest.attributeTypeMap;
    }
}


export type UpdateProjectRequestLabelingMethodEnum = 'single_label' | 'object_detection';
export const UpdateProjectRequestLabelingMethodEnumValues: string[] = ['single_label', 'object_detection'];

export type UpdateProjectRequestSelectedProjectTypeInWizardEnum = 'accelerometer' | 'audio' | 'image_classification' | 'object_detection' | 'something_else';
export const UpdateProjectRequestSelectedProjectTypeInWizardEnumValues: string[] = ['accelerometer', 'audio', 'image_classification', 'object_detection', 'something_else'];

export type UpdateProjectRequestDataAcquisitionViewTypeEnum = 'list' | 'grid';
export const UpdateProjectRequestDataAcquisitionViewTypeEnumValues: string[] = ['list', 'grid'];
